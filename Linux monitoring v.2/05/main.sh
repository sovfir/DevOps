#!/bin/bash
#(shebang) - специальная последовательность символов, указывающая на интерпретатор
updated_log_file="$(pwd)/../04/log/nginx_log_day_3.log"
#Значение переменной представляет собой путь к файлу журнала nginx_log_day_3.log. 
#Путь составляется с помощью команды pwd, которая возвращает текущий рабочий каталог, и конкатенации строк для добавления остальной части пути.
function sort_entries_by_response_code() {
    awk '{print $9, $0}' "$updated_log_file" | sort -n | cut -d ' ' -f2-
    #мы используем утилиту awk для обработки файла журнала "$updated_log_file". Флаг {print $9, $0} 
    #указывает awk вывести значение поля $9 (код ответа HTTP) и всю строку $0 (полная строка из файла журнала). 
    #Таким образом, мы выводим код ответа HTTP вместе со всей строкой записи.
    #Результат вывода команды awk передается в команду sort с флагом -n, который выполняет числовую сортировку. 
    #Таким образом, записи сортируются по коду ответа HTTP в порядке возрастания.
    #Результат вывода команды sort передается в команду cut с флагом -d ' ' и -f2-. Флаг -d ' ' 
    #указывает, что разделителем полей является пробел, а флаг -f2- указывает вырезать поля со второго и до конца строки. 
    #Таким образом, мы отбрасываем код ответа HTTP и выводим только полные строки записей журнала после сортировки.
}

function find_unique_ips() {
    awk '{print $1}' "$updated_log_file" | sort -u
    #Функция использует утилиту awk и sort для поиска уникальных IP-адресов, найденных в записях файла журнала.
    #awk читает входной поток (или файлы) по строкам и применяет заданные правила (шаблоны) для обработки каждой строки. 
}

function find_error_requests() {
    awk '($9 >= 400 && $9 < 600) {print}' "$updated_log_file"
    #команда awk с указанными правилами для обработки строк файла журнала. Она проверяет условие ($9 >= 400 && $9 < 600), 
    #которое означает, что код ответа HTTP ($9) 
    #должен быть больше или равен 400 и меньше 600. Если условие выполняется, 
    #то выполняется блок действий {print}, который просто выводит текущую строку.
    #Это переменная, содержащая путь к файлу журнала, который нужно обработать. 
    #Она используется в качестве аргумента для утилиты awk, указывая файл для чтения.
}

function find_unique_ips_with_errors() {
    awk '($9 >= 400 && $9 < 600) {print $1}' "$updated_log_file" | sort -u
    #awk с указанными правилами для обработки строк файла журнала. Она проверяет условие ($9 >= 400 && $9 < 600), 
    #которое означает, что код ответа HTTP ($9) должен быть больше или равен 400 и меньше 600. 
    #Если условие выполняется, то выполняется блок действий {print $1}, который выводит первое поле (IP-адрес) текущей строки.
    #| sort -u: Это конвейерная команда, которая передает вывод команды awk (список IP-адресов) 
    #на вход утилите sort с опцией -u. sort -u сортирует и удаляет повторяющиеся строки, оставляя только уникальные IP-адреса.
}

if [[ $# -ne 1 ]]; then
    echo "Use: $0 <option>"
    echo "Sorting options:"
    echo "        1 - All entries sorted by response code"
    echo "        2 - All unique IPs found in the entries"
    echo "        3 - All requests with errors (response code - 4xx or 5xx)"
    echo "        4 - All unique IPs found among the erroneous requests"
    exit 1
fi
#имеет ли скрипт правильное количество аргументов командной строки. 
option="$1"
#Переменная из аргумента

#Этот код использует конструкцию case в bash для выполнения различных действий 
#в зависимости от значения переменной option, которая задается в командной строке. 
#В зависимости от значения option, будет вызываться соответствующая функция.
case "$option" in
    1) sort_entries_by_response_code ;;
    2) find_unique_ips ;;
    3) find_error_requests ;;
    4) find_unique_ips_with_errors ;;
    *)
        echo "Error: Invalid method! Choose 1, 2, 3, 4."
        exit 1
    ;;
esac